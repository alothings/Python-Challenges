#+STARTUP: hidestars
#+STARTUP: indent

* Decorator

In the context of design patters: Decorators dynamically alter the functionality of a function, method or class without having to use subclasses.

Ideal when need to extend functionality of functions without modifying them.

Essentially: decorators = wrappers. Modifying the behavior of the code before and after a target function execution, augmenting the original.

- Note: functions in Python are ..high order something..

Closure: Inner functions have access to the enclosing scope.
				   
#+BEGIN_SRC python

def compose_greet_func(name):
    def get_message():
        return "Hello there "+name+"!"

    return get_message

greet = compose_greet_func("John")
print greet()

# Outputs: Hello there John!

#+END_SRC

** Composition of Decorators
Function decorators are simply wrapper to existing functions.

#+BEGIN_SRC python
def get_text(name):
  return "Whatever {} is here".format(name)

def p_decorate(func):
  def func_wrapper(name):
    return "<p>{0}</p>".format(func(name))
  return func_wrapper

my_get_text = p_decorate(get_text)
print(my_get_text("John"))

#+END_SRC

** Decorator Syntax
Python makes creating and using decorators a bit cleaner and nicer. Instead of doing my_get_text = p_decorate(get_text), there is a shortcut. Just put @ and the name of the decorating function before the function to be decorated.

#+BEGIN_SRC python
def p_decorate(func):
   def func_wrapper(name):
       return "<p>{0}</p>".format(func(name))
# Outputs <p>Hello John</p>
#+END_SRC

* Resources:
http://thecodeship.com/patterns/guide-to-python-function-decorators/

